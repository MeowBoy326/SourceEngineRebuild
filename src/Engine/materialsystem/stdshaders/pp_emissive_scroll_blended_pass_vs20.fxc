//========== Copyright (c) Valve Corporation, All rights reserved. ==========//

// DYNAMIC: "COMPRESSED_VERTS"			"0..1"
// DYNAMIC: "SKINNING"					"0..1"
//	STATIC: "TREESWAY"              	"0..2"

// DYNAMIC: "MORPHING"					"0..1" [vs30] [ = pShaderAPI->IsHWMorphingEnabled() ]
// DYNAMIC: "MORPHING"					"0..0" [vs20] [ = 0 ]

// Includes
#include "common_vs_fxc.h"

// Globals
static const bool g_bSkinning = SKINNING ? true : false;

#if ( TREESWAY )
	const float4 g_vTreeSwayParams0			: register( SHADER_SPECIFIC_CONST_2 );
	const float4 g_vTreeSwayParams1			: register( SHADER_SPECIFIC_CONST_3 );
	const float4 g_vTreeSwayParams2			: register( SHADER_SPECIFIC_CONST_4 );
	const float4 g_vTreeSwayParams3			: register( SHADER_SPECIFIC_CONST_5 );
	const float4 g_vTreeSwayParams4			: register( SHADER_SPECIFIC_CONST_9 );

	#define g_flTime				g_vTreeSwayParams0.x
	#define g_vWindDir				g_vTreeSwayParams0.yz

	#define g_flScrumbleFalloffCurve g_vTreeSwayParams1.x
	#define g_flSwayFalloffCurve	g_vTreeSwayParams1.y
	#define g_flScrumbleSpeed		g_vTreeSwayParams1.z
	#define g_flFastSwaySpeedScale	g_vTreeSwayParams1.w


	#define g_flHeight				g_vTreeSwayParams2.x
	#define g_flStartHeight			g_vTreeSwayParams2.y
	#define g_flRadius				g_vTreeSwayParams2.z
	#define g_flStartRadius			g_vTreeSwayParams2.w

	#define g_flSwaySpeed			g_vTreeSwayParams3.x
	#define g_flSwayIntensity		g_vTreeSwayParams3.y
	#define g_flScrumbleWaveCount	g_vTreeSwayParams3.z
	#define g_flScrumbleIntensity	g_vTreeSwayParams3.w

	#define g_flWindSpeedLerpStart	g_vTreeSwayParams4.x
	#define g_flWindSpeedLerpEnd	g_vTreeSwayParams4.y
	
	#include "tree_sway.h"
#endif

#if defined(SHADER_MODEL_VS_3_0) && MORPHING
// NOTE: cMorphTargetTextureDim.xy = target dimensions,
//		 cMorphTargetTextureDim.z = 4tuples/morph
const float3 cMorphTargetTextureDim			: register( SHADER_SPECIFIC_CONST_6 );
const float4 cMorphSubrect					: register( SHADER_SPECIFIC_CONST_7 );

sampler2D morphSampler : register( s0 );
#endif

// Structs
struct VS_INPUT
{
	float4 vPos					: POSITION;		// Position
	float4 vBoneWeights			: BLENDWEIGHT;	// Skin weights
	float4 vBoneIndices			: BLENDINDICES;	// Skin indices
	float4 vTexCoord0			: TEXCOORD0;	// Base texture coordinates

	float3 vPosFlex				: POSITION1;	// Delta positions for flexing
	
#if defined(SHADER_MODEL_VS_3_0) && MORPHING
	float vVertexID				: POSITION2;
#endif
};

struct VS_OUTPUT
{
    float4 vProjPosition		: POSITION;		// Projection-space position
	float2 vTexCoord0			: TEXCOORD0;
};

// Main
VS_OUTPUT main( const VS_INPUT i )
{
	VS_OUTPUT o;

	float4 vObjPosition = i.vPos;
	
#if !defined( SHADER_MODEL_VS_3_0 ) || !MORPHING
	ApplyMorph( i.vPosFlex, vObjPosition.xyz );
#else
	ApplyMorph( morphSampler, cMorphTargetTextureDim, cMorphSubrect, i.vVertexID, float3( 0, 0, 0 ), vObjPosition.xyz );
#endif

    #if ( TREESWAY )
	{
		vObjPosition.xyz = ComputeTreeSway( vObjPosition.xyz, g_flTime );
	}
	#endif

	// Transform the position
	float3 vWorldPosition = { 0.0f, 0.0f, 0.0f };
	SkinPosition( g_bSkinning, vObjPosition, i.vBoneWeights, i.vBoneIndices, vWorldPosition );

	// Transform into projection space
	float4 vProjPosition = mul( float4( vWorldPosition, 1.0f ), cViewProj );
	o.vProjPosition = vProjPosition;

	// Pass through tex coords
	o.vTexCoord0.xy = i.vTexCoord0.xy;

	return o;
}
