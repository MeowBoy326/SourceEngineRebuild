// STATIC: "CONVERT_TO_SRGB" "0..1"	[ps20b][ps30][= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CONVERT_TO_SRGB" "0..0"	[= 0] [XBOX]

// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"		"0..1"	[ps20b] [PC]
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"		"0..0"	[ps20b] [XBOX]
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"		"0..1"	[ps30]

#if defined( SHADER_MODEL_PS_2_0 )
#	define WRITE_DEPTH_TO_DESTALPHA 0
#endif

#include "shader_constant_register_map.h"
#include "common_ps_fxc.h"
#include "common_fog_ps_fxc.h"

const float4 g_FogParams				: register( PSREG_FOG_PARAMS );
const float3 g_EyePos					: register( PSREG_EYEPOS_SPEC_EXPONENT );

static const int g_nPixelFogType = PIXELFOGTYPE;

struct PS_INPUT
{
    float4 projPos						: POSITION;			// Projection-space position	

	#if ( !HARDWAREFOGBLEND )
		float4 worldPos_projPosZ		: TEXCOORD0;		// Necessary for pixel fog
	#endif
	
	#if defined( _X360 )
		float2 vScreenPos : VPOS;
	#endif
};

float4 main( PS_INPUT i ) : COLOR
{
	float4 result = float4( 0.0f, 0.0f, 0.0f, 1.0f );
	#if ( HARDWAREFOGBLEND )
	{
		return result;
	}
	#else
	{
        float fogFactor = CalcPixelFogFactor(g_nPixelFogType, g_FogParams, g_EyePos, i.worldPos_projPosZ.xyz, i.worldPos_projPosZ.w);
        return FinalOutput(result, fogFactor, g_nPixelFogType, TONEMAP_SCALE_LINEAR, (WRITE_DEPTH_TO_DESTALPHA != 0), i.worldPos_projPosZ.w);
    }
	#endif
}

