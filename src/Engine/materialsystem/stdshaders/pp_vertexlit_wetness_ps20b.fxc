
// STATIC: "CONVERT_TO_SRGB"			"0..0"
// STATIC: "FLASHLIGHT"					"0..1"
// STATIC: "PHONGWARPTEXTURE"			"0..1"
// STATIC: "WRINKLEMAP"					"0..1"
// STATIC: "RIMLIGHT"					"0..1"
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"	"0..2"	[ps20b] [PC]
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"	"0..2"	[ps30]  [PC]
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"	"0..0"	[ps20b] [XBOX]
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"	"0..0"  [ps20]

// DYNAMIC: "PIXELFOGTYPE"				"0..1"
// DYNAMIC: "NUM_LIGHTS"				"0..4"
// DYNAMIC: "FLASHLIGHTSHADOWS"			"0..0"  [ps20]
// DYNAMIC: "FLASHLIGHTSHADOWS"			"0..1"	[ps20b]
// DYNAMIC: "FLASHLIGHTSHADOWS"			"0..1"	[ps30]
// DYNAMIC: "PHONG_USE_EXPONENT_FACTOR"	"0..0"	[ps20]
// DYNAMIC: "PHONG_USE_EXPONENT_FACTOR"	"0..1"	[ps20b] [ps30]
// DYNAMIC: "CASCADED_SHADOW"			"0..1"	[ps30]
// DYNAMIC: "UBERLIGHT"					"0..1"	[ps30]

// SKIP: $CASCADED_SHADOW && $FLASHLIGHT

// SKIP: $UBERLIGHT && !$FLASHLIGHT

// We don't care about flashlight depth unless the flashlight is on
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTSHADOWS == 1 )

// Flashlight shadow filter mode is irrelevant if there is no flashlight
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTDEPTHFILTERMODE != 0 ) [ps20b]
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTDEPTHFILTERMODE != 0 ) [ps30]

#include "common_flashlight_fxc.h"
#include "shader_constant_register_map.h"


const float4 g_EnvmapTint_ShadowTweaks : register(PSREG_ENVMAP_TINT__SHADOW_TWEAKS); // w controls spec mask
const float3 cAmbientCube[6] : register(PSREG_AMBIENT_CUBE);
const float4 g_EyePos_SpecExponent : register(PSREG_EYEPOS_SPEC_EXPONENT);
const float4 g_FogParams : register(PSREG_FOG_PARAMS);
const float4 g_FlashlightAttenuationFactors_RimMask : register(PSREG_FLASHLIGHT_ATTENUATION); // On non-flashlight pass, x has rim mask control
const float4 g_FlashlightPos_RimBoost : register(PSREG_FLASHLIGHT_POSITION_RIM_BOOST);
#if FLASHLIGHT
	const float4x4 g_FlashlightWorldToTexture		: register( PSREG_FLASHLIGHT_TO_WORLD_TEXTURE );
#endif
const float4 g_FresnelSpecParams : register(PSREG_FRESNEL_SPEC_PARAMS); // xyz are fresnel, w is specular boost
const float4 g_SpecularRimParams : register(PSREG_SPEC_RIM_PARAMS); // xyz are specular tint color, w is rim power
PixelShaderLightInfo cLightInfo[3] : register(PSREG_LIGHT_INFO_ARRAY); // 2 registers each - 6 registers total (4th light spread across w's)

#if UBERLIGHT && defined( SHADER_MODEL_PS_3_0 )
const float3 g_vSmoothEdge0							: register( PSREG_UBERLIGHT_SMOOTH_EDGE_0 );		// ps_3_0 and up (over 32 registers)
const float3 g_vSmoothEdge1							: register( PSREG_UBERLIGHT_SMOOTH_EDGE_1 );
const float3 g_vSmoothOneOverWidth					: register( PSREG_UBERLIGHT_SMOOTH_EDGE_OOW );
const float4 g_vShearRound							: register( PSREG_UBERLIGHT_SHEAR_ROUND );
const float4 g_aAbB									: register( PSREG_UBERLIGHT_AABB );
const float4x4 g_FlashlightWorldToLight				: register( PSREG_UBERLIGHT_WORLD_TO_LIGHT );
#endif

const float4 g_ShaderControls : register(PSREG_CONSTANT_27); // x is basemap alpgha phong mask, y is 1 - blendtintbybasealpha, z is blend strength, w controls "INVERTPHONGMASK"
#define g_FlashlightPos					g_FlashlightPos_RimBoost.xyz
#define	g_fRimBoost						g_FlashlightPos_RimBoost.w
#define g_FresnelRanges					g_FresnelSpecParams.xyz
#define g_SpecularBoost					g_FresnelSpecParams.w
#define g_SpecularTint					g_SpecularRimParams.xyz
#define g_RimExponent					g_SpecularRimParams.w
#define g_FlashlightAttenuationFactors	g_FlashlightAttenuationFactors_RimMask
#define g_RimMaskControl				g_FlashlightAttenuationFactors_RimMask.x
#define g_SelfIllumMaskControl			g_EnvMapFresnel.w
#define g_fBaseMapAlphaPhongMask		g_ShaderControls.x
#define g_fWetnessBlendStrength 		g_ShaderControls.z
#define g_fInvertPhongMask				g_ShaderControls.w

const float4 g_DirectionalLightMask : register(PSREG_FLASHLIGHT_COLOR);
const float3 g_CascadedStepData : register(PSREG_FLASHLIGHT_TO_WORLD_TEXTURE);
#define g_CascadedForward					g_FlashlightPos_RimBoost.xyz


sampler BaseTextureSampler : register(s0); // Base map, selfillum in alpha
sampler SpecularWarpSampler : register(s1); // Specular warp sampler (for iridescence etc)
sampler NormalMapSampler : register(s3); // Normal map, specular mask in alpha
sampler ShadowDepthSampler : register(s4); // Flashlight shadow depth map sampler
sampler NormalizeRandRotSampler : register(s5); // Normalization / RandomRotation samplers
sampler FlashlightSampler : register(s6); // Flashlight cookie
sampler SpecExponentSampler : register(s7); // Specular exponent map

#if WRINKLEMAP
sampler NormalWrinkleSampler	: register( s11 );	// Compression base
sampler NormalStretchSampler	: register( s12 );	// Expansion base
#endif

struct PS_INPUT
{
    float4 baseTexCoordDetailTexCoord : TEXCOORD0; // xy=base zw=detail
    float3 lightAtten : TEXCOORD1; // Scalar light attenuation factors for FOUR lights
	
#if CASCADED_SHADOW
	float4 worldVertToEyeVector_ShadowPosX			: TEXCOORD2;
	float4 tangentSpaceTranspose_Row0ShadowPosY		: TEXCOORD3;
	float4 tangentSpaceTranspose_Row1ShadowPosZ		: TEXCOORD4;
	float4 tangentSpaceTranspose_Row2ShadowPosW		: TEXCOORD5;
#else
    float3 worldVertToEyeVector : TEXCOORD2;
    float3x3 tangentSpaceTranspose : TEXCOORD3;
	//	     second row											: TEXCOORD4;
	//	     third row											: TEXCOORD5;
#endif
    float4 worldPos_atten3 : TEXCOORD6;
    float4 projPos_fWrinkleWeight : TEXCOORD7;
};

float4 main(PS_INPUT i) : COLOR
{
    bool bWrinkleMap = WRINKLEMAP ? true : false;
    bool bDoSpecularWarp = PHONGWARPTEXTURE ? true : false;
    bool bDoAmbientOcclusion = false;
    bool bFlashlight = (FLASHLIGHT != 0) ? true : false;
    bool bDoRimLighting = RIMLIGHT ? true : false;
    int nNumLights = NUM_LIGHTS;

	// Unpacking for convenience
    float fWrinkleWeight = i.projPos_fWrinkleWeight.w;
    float3 vProjPos = i.projPos_fWrinkleWeight.xyz;
    float3 vWorldPos = i.worldPos_atten3.xyz;
    float atten3 = i.worldPos_atten3.w;

    float4 vLightAtten = float4(i.lightAtten, atten3);

#if WRINKLEMAP
	float flWrinkleAmount = saturate( -fWrinkleWeight );					// One of these two is zero
	float flStretchAmount = saturate(  fWrinkleWeight );					// while the other is in the 0..1 range

	float flTextureAmount = 1.0f - flWrinkleAmount - flStretchAmount;		// These should sum to one
#endif
    
    float4 baseColor = tex2D(BaseTextureSampler, i.baseTexCoordDetailTexCoord.xy);
    
    float fogFactor = CalcPixelFogFactor(PIXELFOGTYPE, g_FogParams, g_EyePos_SpecExponent.xyz, vWorldPos.xyz, vProjPos.z);

#if CASCADED_SHADOW
	float3 vEyeDir = normalize(i.worldVertToEyeVector_ShadowPosX.xyz);
#else
    float3 vEyeDir = normalize(i.worldVertToEyeVector);
#endif
    
    float3 vRimAmbientCubeColor = PixelShaderAmbientLight(vEyeDir, cAmbientCube);

    float3 worldSpaceNormal, tangentSpaceNormal;
    float fSpecMask = 1.0f;
    float4 normalTexel = tex2D(NormalMapSampler, i.baseTexCoordDetailTexCoord.xy);

#if WRINKLEMAP
	float4 wrinkleNormal = tex2D( NormalWrinkleSampler,	i.baseTexCoordDetailTexCoord.xy );
	float4 stretchNormal = tex2D( NormalStretchSampler,	i.baseTexCoordDetailTexCoord.xy );
	normalTexel = flTextureAmount * normalTexel + flWrinkleAmount * wrinkleNormal + flStretchAmount * stretchNormal;
#endif
    
    tangentSpaceNormal = lerp(2.0f * normalTexel.xyz - 1.0f, float3(0, 0, 1), g_fBaseMapAlphaPhongMask);
    fSpecMask = lerp(normalTexel.a, baseColor.a, g_fBaseMapAlphaPhongMask);

#if CASCADED_SHADOW
	float3x3 tangentSpaceTranspose = float3x3(i.tangentSpaceTranspose_Row0ShadowPosY.xyz,
		i.tangentSpaceTranspose_Row1ShadowPosZ.xyz,
		i.tangentSpaceTranspose_Row2ShadowPosW.xyz);
#else
    float3x3 tangentSpaceTranspose = i.tangentSpaceTranspose;
#endif
    
    // We need a normal if we're doing any lighting
    worldSpaceNormal = normalize(mul(tangentSpaceTranspose, tangentSpaceNormal));

    float fFresnelRanges = Fresnel(worldSpaceNormal, vEyeDir, g_FresnelRanges);
    float fRimFresnel = Fresnel4(worldSpaceNormal, vEyeDir);

	// Break down reflect so that we can share dot(worldSpaceNormal,vEyeDir) with fresnel terms
    float3 vReflect = 2 * worldSpaceNormal * dot(worldSpaceNormal, vEyeDir) - vEyeDir;
    
    if (!bFlashlight)
    {
#if CASCADED_SHADOW
		float3 worldVertexNormal = normalize( mul( tangentSpaceTranspose, float3( 0, 0, 1 ) ) );
		float3 closePosition;
		closePosition.x = i.worldVertToEyeVector_ShadowPosX.w;
		closePosition.y = i.tangentSpaceTranspose_Row0ShadowPosY.w;
		closePosition.z = i.tangentSpaceTranspose_Row1ShadowPosZ.w;
		closePosition /= i.tangentSpaceTranspose_Row2ShadowPosW.w;
		
		float flShadow = DoCascadedShadow( ShadowDepthSampler, NormalizeRandRotSampler, worldVertexNormal,
			g_CascadedForward, closePosition, vWorldPos, FLASHLIGHTDEPTHFILTERMODE, g_CascadedStepData,
			vProjPos.xy / vProjPos.z, float4( 0.0005, 0.0, 0.0, 0.0 ) );
		
		vLightAtten *= lerp( float4( 1, 1, 1, 1 ), float4( flShadow, flShadow, flShadow, flShadow ), g_DirectionalLightMask );
#endif
    }
    
    float3 specularLighting = float3(0.0f, 0.0f, 0.0f);
    float3 rimLighting = float3(0.0f, 0.0f, 0.0f);

    float3 vSpecularTint = 1;
    float fRimMask = 0;
    float fSpecExp = 1;
    
    float4 vSpecExpMap = tex2D(SpecExponentSampler, i.baseTexCoordDetailTexCoord.xy);
	
    if (!bFlashlight)
    {
        fRimMask = lerp(1.0f, vSpecExpMap.a, g_RimMaskControl); // Select rim mask
    }

	// If the exponent passed in as a constant is zero, use the value from the map as the exponent
#if defined( _X360 )
	[flatten]
#endif
	
#if ( PHONG_USE_EXPONENT_FACTOR )
	fSpecExp = ( 1.0f + g_EyePos_SpecExponent.w * vSpecExpMap.r );
#else
    fSpecExp = (g_EyePos_SpecExponent.w >= 0.0) ? g_EyePos_SpecExponent.w : (1.0f + 149.0f * vSpecExpMap.r);
#endif

	// If constant tint is negative, tint with albedo, based upon scalar tint map
#if defined( _X360 )
	[flatten]
#endif
    vSpecularTint = lerp(float3(1.0f, 1.0f, 1.0f), baseColor.rgb, vSpecExpMap.g);
    vSpecularTint = (g_SpecularTint.r >= 0.0) ? g_SpecularTint.rgb : vSpecularTint;
    
    if (!bFlashlight)
    {
		// Summation of specular from all local lights besides the flashlight
        PixelShaderDoSpecularLighting(vWorldPos, worldSpaceNormal,
			fSpecExp, vEyeDir, vLightAtten,
			nNumLights, cLightInfo, false, 1.0f, bDoSpecularWarp,
			SpecularWarpSampler, fFresnelRanges, bDoRimLighting, g_RimExponent,

			// Outputs
			specularLighting, rimLighting);
    }
    else
    {
#if FLASHLIGHT
        float3 diffuseLighting = float3(0.0f, 0.0f, 0.0f);
			float4 flashlightSpacePosition = mul( float4( vWorldPos, 1.0f ), g_FlashlightWorldToTexture );

			DoSpecularFlashlight( g_FlashlightPos, vWorldPos, flashlightSpacePosition, worldSpaceNormal, 
				g_FlashlightAttenuationFactors.xyz, g_FlashlightAttenuationFactors.w,
				FlashlightSampler, ShadowDepthSampler, NormalizeRandRotSampler, FLASHLIGHTDEPTHFILTERMODE, FLASHLIGHTSHADOWS, true, vProjPos.xy / vProjPos.z,
				fSpecExp, vEyeDir, bDoSpecularWarp, SpecularWarpSampler, fFresnelRanges, g_EnvmapTint_ShadowTweaks,

				// These two values are output
				diffuseLighting, specularLighting );
				
#if UBERLIGHT
				{
					float4 uberLightPosition = mul( float4( vWorldPos, 1.0f ), g_FlashlightWorldToLight ).yzxw;
					float fUber = uberlight( uberLightPosition, g_vSmoothEdge0, g_vSmoothEdge1,
									   g_vSmoothOneOverWidth, g_vShearRound.xy, g_aAbB, g_vShearRound.zw );
					specularLighting *= fUber;
				}			
#endif
#endif
    }
    
    // If we didn't already apply Fresnel to specular warp, modulate the specular
    if (!bDoSpecularWarp)
        fSpecMask *= fFresnelRanges;
    
    // Modulate with spec mask, boost and tint
    specularLighting *= fSpecMask * g_SpecularBoost;
    
    if (bDoRimLighting && !bFlashlight)
    {
        float fRimMultiply = fRimMask * fRimFresnel; // both unit range: [0, 1]
		
		// Add in rim light modulated with tint, mask and traditional Fresnel (not using Fresnel ranges)
        rimLighting *= fRimMultiply;

		// Fold rim lighting into specular term by using the max so that we don't really add light twice...
        specularLighting = max(specularLighting, rimLighting);

		// Add in view-ray lookup from ambient cube
        specularLighting += (vRimAmbientCubeColor * g_fRimBoost) * saturate(fRimMultiply * worldSpaceNormal.z);
    }
    
    float3 result = specularLighting * vSpecularTint * g_fWetnessBlendStrength;
    result *= (1 - fogFactor);

    return FinalOutput(float4(result, 0), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_LINEAR, false, vProjPos.z);
}