//========== Copyright (c) Valve Corporation, All rights reserved. ==========//

// Includes =======================================================================================
// STATIC: "CONVERT_TO_SRGB" "0..1"	[ps20b][= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CONVERT_TO_SRGB" "0..1"	[ps30][= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CORRECTED_FLOW" "0..1"
// DYNAMIC: "FLOW_DEBUG"						"0..1"

// SKIP: $FLOW_DEBUG && !$CORRECTED_FLOW

#include "common_vertexlitgeneric_dx9.h"

// Texture Samplers ===============================================================================
sampler g_tBaseSampler		: register( s0 );
sampler g_tFlowSampler		: register( s1 );
sampler g_tSelfIllumSampler	: register( s2 );

// Shaders Constants and Globals ==================================================================
const float4 g_vPackedConst0 : register( c0 );
#define g_flBlendStrength   g_vPackedConst0.x
#define g_flTime			g_vPackedConst0.y

const float2 g_vEmissiveScrollVector : register( c1 );
const float3 g_cSelfIllumTint : register( c2 );

#if CORRECTED_FLOW
const float4 g_vFlowParams1 : register(c3);
#define g_flFlowTimeIntervalInSeconds  ( g_vFlowParams1.x ) // 1.0f / 10.0f
#define g_flNormalUvScale ( g_vFlowParams1.y ) // 1.0f / 1.15f
#define g_flFlowUvScrollDistance  ( g_vFlowParams1.z ) // 3.0f
#define g_flTimeScale     ( g_vFlowParams1.w ) // 1.0f
#endif

// Interpolated values ============================================================================
struct PS_INPUT
{
	float2 vTexCoord0 : TEXCOORD0;
};

// Main ===========================================================================================
//float4 main( PS_INPUT i ) : COLOR // Non-HDR for debugging
float4 main( PS_INPUT i ) : COLOR
{
	// Color texture
	float4 cBaseColor = tex2D( g_tBaseSampler, i.vTexCoord0.xy );
    float4 cEmissiveColor = float4(0.f, 0.f, 0.f, 0.f);
#if !CORRECTED_FLOW
	// Fetch from dudv map and then fetch from emissive texture with new uv's & scroll
	float4 vFlowValue = tex2D( g_tFlowSampler, i.vTexCoord0.xy );
	float2 vEmissiveTexCoord = vFlowValue.xy + ( g_vEmissiveScrollVector.xy * g_flTime );
	cEmissiveColor = tex2D( g_tSelfIllumSampler, vEmissiveTexCoord.xy );
#else
    {
        float flNormalUvScale = g_flNormalUvScale;
        float flFlowTimeIntervalInSeconds = g_flFlowTimeIntervalInSeconds;
        float flFlowUvScrollDistance = g_flFlowUvScrollDistance;
        float flTimeScale = g_flTimeScale;

		// Input uv
        float2 vWorldUv = i.vTexCoord0.xy;
        float2 vUv1 = i.vTexCoord0.xy * flNormalUvScale;
        float2 vUv2 = vUv1.xy;

		// Flow texel has a 2D flow vector in the rg channels of the texture
        float4 vFlowTexel = tex2D(g_tFlowSampler, vWorldUv.xy);
        #if ( FLOW_DEBUG == 1 ) // Flow vectors
		{
			float4 vResult = float4( pow( vFlowTexel.rgb, 2.2f ), 0 );
			return FinalOutput( float4( vResult.rgb, 1.0f ), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
		}
        #endif

		// Unpack world flow vector from texture
        float2 vFlowVectorTs = (vFlowTexel.rg * 2.0f) - 1.0f;

        float flTimeInIntervals = ((g_flTime * flTimeScale)) / (flFlowTimeIntervalInSeconds * 2.0f);
        float flScrollTime1 = frac(flTimeInIntervals);
        float flScrollTime2 = frac(flTimeInIntervals + 0.5f); // Half an interval off from texture 1

		// Every interval has a unique offset so we don't see the same bump texels repeating continuously
        float flOffset1 = floor(flTimeInIntervals) * 0.311f;
        float flOffset2 = floor(flTimeInIntervals + 0.5f) * 0.311f + 0.5f; // The +0.5 is to match the phase offset

		// Final flow uv is originalUv + interval offset + ( flowvector * scroll
        float2 vFlowUv1 = vUv1.xy + flOffset1 + (flScrollTime1 * (flFlowUvScrollDistance * vFlowVectorTs.xy));
        float2 vFlowUv2 = vUv2.xy + flOffset2 + (flScrollTime2 * (flFlowUvScrollDistance * vFlowVectorTs.xy));

		// Lerp values to blend between the two layers of bump
        //float flWeight1 = abs((2.0f * frac(flTimeInIntervals + 0.5f)) - 1.0f);
        float flWeight2 = abs((2.0f * frac(flTimeInIntervals)) - 1.0f);

        float4 cEmmisiveTexel1 = tex2D(g_tSelfIllumSampler, vFlowUv1.xy);
        float4 cEmmisiveTexel2 = tex2D(g_tSelfIllumSampler, vFlowUv2.xy);

		// Combine both layers
        cEmissiveColor = lerp(cEmmisiveTexel1, cEmmisiveTexel2, flWeight2);
    }
#endif

	//===============//
	// Combine terms //
	//===============//
	float4 result;
	result.rgb = cBaseColor.rgb * cEmissiveColor.rgb * g_cSelfIllumTint.rgb;
	result.rgb *= g_flBlendStrength;

	// Set alpha to 0.0f so it doesn't change dest alpha (I should probably disable dest alpha writes)
	result.a = 0.0f;

	return FinalOutput( result, 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_LINEAR );
}
